/*
 * This file is part of the Emulation-as-a-Service framework.
 *
 * The Emulation-as-a-Service framework is free software: you can
 * redistribute it and/or modify it under the terms of the GNU General
 * Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * The Emulation-as-a-Service framework is distributed in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY; without even the
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Emulation-as-a-Software framework.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package de.bwl.bwfla.common.jaxwsstubs.workflowsapi;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 2.4.6
 * 2014-05-26T16:23:04.093+02:00
 * Generated source version: 2.4.6
 * 
 */
@WebServiceClient(name = "AccessImplService", 
                  wsdlLocation = "http://localhost:8080/AccessImpl?wsdl",
                  targetNamespace = "http://api.workflows.bwfla.bwl.de/") 
public class AccessImplService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://api.workflows.bwfla.bwl.de/", "AccessImplService");
    public final static QName AccessImplPort = new QName("http://api.workflows.bwfla.bwl.de/", "AccessImplPort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/AccessImpl?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(AccessImplService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://localhost:8080/AccessImpl?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public AccessImplService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AccessImplService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AccessImplService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public AccessImplService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public AccessImplService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public AccessImplService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns AccessAPI
     */
    @WebEndpoint(name = "AccessImplPort")
    public AccessAPI getAccessImplPort() {
        return super.getPort(AccessImplPort, AccessAPI.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AccessAPI
     */
    @WebEndpoint(name = "AccessImplPort")
    public AccessAPI getAccessImplPort(WebServiceFeature... features) {
        return super.getPort(AccessImplPort, AccessAPI.class, features);
    }

}
